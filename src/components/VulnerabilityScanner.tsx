import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Play, 
  Pause, 
  Square, 
  Plus,
  Globe,
  Smartphone,
  Server,
  Wifi,
  HardDrive,
  Monitor,
  AlertTriangle,
  CheckCircle,
  Clock,
  Search,
  Filter
} from 'lucide-react';
import { ScanTarget } from '../types';

const VulnerabilityScanner: React.FC = () => {
  const [scanTargets, setScanTargets] = useState<ScanTarget[]>([
    {
      id: '1',
      name: 'api.company.com',
      type: 'web',
      url: 'https://api.company.com',
      status: 'completed',
      lastScan: '2024-01-15 14:30',
      vulnerabilities: 3
    },
    {
      id: '2',
      name: 'Mobile App v2.1',
      type: 'mobile',
      status: 'scanning',
      lastScan: '2024-01-15 15:15',
      vulnerabilities: 0
    },
    {
      id: '3',
      name: 'Infrastructure 192.168.1.0/24',
      type: 'infrastructure',
      status: 'idle',
      lastScan: '2024-01-15 10:00',
      vulnerabilities: 7
    },
    {
      id: '4',
      name: 'IoT Device Fleet',
      type: 'iot',
      status: 'completed',
      lastScan: '2024-01-15 09:45',
      vulnerabilities: 2
    }
  ]);

  const [showAddTarget, setShowAddTarget] = useState(false);
  const [selectedFilter, setSelectedFilter] = useState('all');
  const [searchQuery, setSearchQuery] = useState('');

  const scanTypes = [
    { id: 'web', name: 'Web Application', icon: Globe, description: 'OWASP Top 10, XSS, SQL Injection' },
    { id: 'mobile', name: 'Mobile Application', icon: Smartphone, description: 'OWASP Mobile, Reverse Engineering' },
    { id: 'infrastructure', name: 'Infrastructure', icon: Server, description: 'Network ports, Services, Configs' },
    { id: 'iot', name: 'IoT Devices', icon: Wifi, description: 'Firmware, Communication protocols' },
    { id: 'firmware', name: 'Firmware', icon: HardDrive, description: 'Binary analysis, Crypto checks' },
    { id: 'os', name: 'Operating System', icon: Monitor, description: 'Windows/macOS vulnerabilities' }
  ];

  const aiAnalysisTools = [
    { name: 'Neural Vulnerability Classifier', status: 'active', accuracy: '97.3%' },
    { name: 'Pattern Recognition Engine', status: 'active', accuracy: '94.8%' },
    { name: 'Behavioral Analysis AI', status: 'active', accuracy: '96.1%' },
    { name: 'Code Vulnerability Predictor', status: 'training', accuracy: '92.5%' }
  ];

  const getTypeIcon = (type: string) => {
    const typeConfig = scanTypes.find(t => t.id === type);
    return typeConfig?.icon || Globe;
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'scanning': return 'text-blue-400 bg-blue-500/20 border-blue-500/30';
      case 'completed': return 'text-emerald-400 bg-emerald-500/20 border-emerald-500/30';
      case 'error': return 'text-red-400 bg-red-500/20 border-red-500/30';
      default: return 'text-gray-400 bg-gray-500/20 border-gray-500/30';
    }
  };

  const startScan = (targetId: string) => {
    setScanTargets(targets => 
      targets.map(target => 
        target.id === targetId 
          ? { ...target, status: 'scanning' as const }
          : target
      )
    );

    // Simulate scan completion
    setTimeout(() => {
      setScanTargets(targets => 
        targets.map(target => 
          target.id === targetId 
            ? { 
                ...target, 
                status: 'completed' as const, 
                lastScan: new Date().toISOString().slice(0, 16).replace('T', ' '),
                vulnerabilities: Math.floor(Math.random() * 10)
              }
            : target
        )
      );
    }, 5000);
  };

  const filteredTargets = scanTargets.filter(target => {
    const matchesSearch = target.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         target.type.toLowerCase().includes(searchQuery.toLowerCase());
    const matchesFilter = selectedFilter === 'all' || target.type === selectedFilter;
    return matchesSearch && matchesFilter;
  });

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-white">AI Vulnerability Scanner</h1>
          <p className="text-gray-400 mt-1">Advanced threat detection across all platforms</p>
        </div>
        <button
          onClick={() => setShowAddTarget(true)}
          className="bg-emerald-500 hover:bg-emerald-600 text-white px-6 py-3 rounded-lg flex items-center space-x-2 transition-colors"
        >
          <Plus className="w-5 h-5" />
          <span>Add Target</span>
        </button>
      </div>

      {/* AI Analysis Status */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="bg-gray-800 border border-gray-700 rounded-xl p-6"
      >
        <h3 className="text-xl font-semibold text-white mb-4">AI Analysis Engines</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          {aiAnalysisTools.map((tool, index) => (
            <div key={index} className="bg-gray-700/50 rounded-lg p-4 border border-gray-600">
              <div className="flex items-center justify-between mb-2">
                <h4 className="text-white font-medium text-sm">{tool.name}</h4>
                <div className={`w-2 h-2 rounded-full ${tool.status === 'active' ? 'bg-emerald-400' : 'bg-yellow-400'} animate-pulse`}></div>
              </div>
              <p className="text-gray-400 text-xs mb-2">{tool.status === 'active' ? 'Active' : 'Training'}</p>
              <p className="text-emerald-400 font-semibold">{tool.accuracy}</p>
            </div>
          ))}
        </div>
      </motion.div>

      {/* Filters and Search */}
      <div className="flex flex-col sm:flex-row gap-4">
        <div className="relative flex-1">
          <Search className="w-5 h-5 text-gray-400 absolute left-3 top-1/2 transform -translate-y-1/2" />
          <input
            type="text"
            placeholder="Search targets..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="w-full bg-gray-700 border border-gray-600 rounded-lg pl-10 pr-4 py-3 text-white focus:outline-none focus:border-emerald-400"
          />
        </div>
        
        <div className="flex items-center space-x-2">
          <Filter className="w-5 h-5 text-gray-400" />
          <select
            value={selectedFilter}
            onChange={(e) => setSelectedFilter(e.target.value)}
            className="bg-gray-700 border border-gray-600 rounded-lg px-4 py-3 text-white focus:outline-none focus:border-emerald-400"
          >
            <option value="all">All Types</option>
            {scanTypes.map(type => (
              <option key={type.id} value={type.id}>{type.name}</option>
            ))}
          </select>
        </div>
      </div>

      {/* Scan Targets */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {filteredTargets.map((target, index) => {
          const Icon = getTypeIcon(target.type);
          const isScanning = target.status === 'scanning';
          
          return (
            <motion.div
              key={target.id}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: index * 0.1 }}
              className="bg-gray-800 border border-gray-700 rounded-xl p-6 hover:border-emerald-500/30 transition-colors"
            >
              <div className="flex items-start justify-between mb-4">
                <div className="flex items-center space-x-3">
                  <Icon className="w-8 h-8 text-blue-400" />
                  <div>
                    <h3 className="text-white font-semibold">{target.name}</h3>
                    <p className="text-gray-400 text-sm capitalize">{target.type} scan</p>
                    {target.url && (
                      <p className="text-gray-500 text-sm">{target.url}</p>
                    )}
                  </div>
                </div>
                
                <div className={`px-3 py-1 rounded-full text-sm border ${getStatusColor(target.status)}`}>
                  {isScanning && <Clock className="w-4 h-4 inline mr-1 animate-spin" />}
                  {target.status === 'completed' && <CheckCircle className="w-4 h-4 inline mr-1" />}
                  {target.status === 'error' && <AlertTriangle className="w-4 h-4 inline mr-1" />}
                  {target.status.charAt(0).toUpperCase() + target.status.slice(1)}
                </div>
              </div>

              {isScanning && (
                <div className="mb-4">
                  <div className="flex justify-between text-sm mb-2">
                    <span className="text-gray-400">Scanning progress</span>
                    <span className="text-white">67%</span>
                  </div>
                  <div className="w-full bg-gray-700 rounded-full h-2">
                    <motion.div
                      className="bg-gradient-to-r from-blue-500 to-emerald-500 h-2 rounded-full"
                      initial={{ width: 0 }}
                      animate={{ width: '67%' }}
                      transition={{ duration: 2 }}
                    />
                  </div>
                </div>
              )}

              <div className="grid grid-cols-2 gap-4 mb-4">
                <div>
                  <p className="text-gray-400 text-sm">Last Scan</p>
                  <p className="text-white">{target.lastScan || 'Never'}</p>
                </div>
                <div>
                  <p className="text-gray-400 text-sm">Vulnerabilities</p>
                  <p className={`font-semibold ${target.vulnerabilities > 0 ? 'text-red-400' : 'text-emerald-400'}`}>
                    {target.vulnerabilities}
                  </p>
                </div>
              </div>

              <div className="flex space-x-3">
                <button
                  onClick={() => startScan(target.id)}
                  disabled={isScanning}
                  className={`flex-1 flex items-center justify-center space-x-2 px-4 py-2 rounded-lg transition-colors ${
                    isScanning 
                      ? 'bg-gray-600 text-gray-400 cursor-not-allowed'
                      : 'bg-emerald-500 hover:bg-emerald-600 text-white'
                  }`}
                >
                  {isScanning ? (
                    <>
                      <Pause className="w-4 h-4" />
                      <span>Scanning...</span>
                    </>
                  ) : (
                    <>
                      <Play className="w-4 h-4" />
                      <span>Start Scan</span>
                    </>
                  )}
                </button>
                
                <button className="px-4 py-2 bg-gray-700 hover:bg-gray-600 text-white rounded-lg transition-colors">
                  View Report
                </button>
              </div>
            </motion.div>
          );
        })}
      </div>

      {/* Add Target Modal */}
      <AnimatePresence>
        {showAddTarget && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 flex items-center justify-center z-50"
            onClick={() => setShowAddTarget(false)}
          >
            <motion.div
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              exit={{ opacity: 0, scale: 0.9 }}
              className="bg-gray-800 border border-gray-700 rounded-xl p-6 max-w-2xl w-full mx-4"
              onClick={(e) => e.stopPropagation()}
            >
              <h3 className="text-xl font-semibold text-white mb-6">Add Scan Target</h3>
              
              <div className="grid grid-cols-2 md:grid-cols-3 gap-4 mb-6">
                {scanTypes.map((type) => {
                  const Icon = type.icon;
                  return (
                    <button
                      key={type.id}
                      className="p-4 bg-gray-700/50 border border-gray-600 rounded-lg hover:border-emerald-500/50 transition-colors text-left"
                    >
                      <Icon className="w-8 h-8 text-blue-400 mb-2" />
                      <h4 className="text-white font-medium mb-1">{type.name}</h4>
                      <p className="text-gray-400 text-sm">{type.description}</p>
                    </button>
                  );
                })}
              </div>

              <div className="flex justify-end space-x-3">
                <button
                  onClick={() => setShowAddTarget(false)}
                  className="px-4 py-2 bg-gray-700 hover:bg-gray-600 text-white rounded-lg transition-colors"
                >
                  Cancel
                </button>
                <button className="px-4 py-2 bg-emerald-500 hover:bg-emerald-600 text-white rounded-lg transition-colors">
                  Add Target
                </button>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

export default VulnerabilityScanner;