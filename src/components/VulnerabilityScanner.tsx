import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Play, 
  Pause, 
  Square, 
  Plus,
  Globe,
  Smartphone,
  Server,
  Wifi,
  HardDrive,
  Monitor,
  AlertTriangle,
  CheckCircle,
  Clock,
  Search,
  Filter,
  Settings,
  Zap,
  Brain,
  Target,
  Shield,
  Download,
  Trash2
} from 'lucide-react';
import { ScanTarget } from '../types';
import { vulnerabilityAPI } from '../services/api';
import { firebaseService } from '../services/firebaseService';
import wsService from '../services/websocket';
import toast from 'react-hot-toast';
import { v4 as uuidv4 } from 'uuid';

const VulnerabilityScanner: React.FC = () => {
  const [scanTargets, setScanTargets] = useState<ScanTarget[]>([]);
  const [showAddTarget, setShowAddTarget] = useState(false);
  const [selectedFilter, setSelectedFilter] = useState('all');
  const [searchQuery, setSearchQuery] = useState('');
  const [loading, setLoading] = useState(false);
  const [newTarget, setNewTarget] = useState({
    name: '',
    type: 'web' as ScanTarget['type'],
    url: ''
  });

  const scanTypes = [
    { 
      id: 'web', 
      name: 'Web Application', 
      icon: Globe, 
      description: 'OWASP Top 10, XSS, SQL Injection, CSRF',
      color: 'emerald',
      features: ['SSL/TLS Analysis', 'Port Scanning', 'Directory Enumeration', 'Vulnerability Assessment']
    },
    { 
      id: 'mobile', 
      name: 'Mobile Application', 
      icon: Smartphone, 
      description: 'OWASP Mobile, Reverse Engineering, APK Analysis',
      color: 'blue',
      features: ['Static Analysis', 'Dynamic Analysis', 'Permission Audit', 'Code Obfuscation Check']
    },
    { 
      id: 'infrastructure', 
      name: 'Infrastructure', 
      icon: Server, 
      description: 'Network ports, Services, Configuration audit',
      color: 'purple',
      features: ['Network Mapping', 'Service Detection', 'OS Fingerprinting', 'Configuration Review']
    },
    { 
      id: 'iot', 
      name: 'IoT Devices', 
      icon: Wifi, 
      description: 'Firmware analysis, Communication protocols',
      color: 'orange',
      features: ['Firmware Analysis', 'Protocol Testing', 'Authentication Bypass', 'Default Credentials']
    },
    { 
      id: 'firmware', 
      name: 'Firmware', 
      icon: HardDrive, 
      description: 'Binary analysis, Cryptographic validation',
      color: 'red',
      features: ['Binary Analysis', 'Crypto Validation', 'Backdoor Detection', 'Version Analysis']
    },
    { 
      id: 'os', 
      name: 'Operating System', 
      icon: Monitor, 
      description: 'Windows/macOS/Linux vulnerability assessment',
      color: 'yellow',
      features: ['Patch Analysis', 'Registry Audit', 'Service Review', 'User Account Audit']
    }
  ];

  const aiAnalysisTools = [
    { name: 'Neural Vulnerability Classifier', status: 'active', accuracy: '97.3%', threats: 1247 },
    { name: 'Pattern Recognition Engine', status: 'active', accuracy: '94.8%', threats: 892 },
    { name: 'Behavioral Analysis AI', status: 'active', accuracy: '96.1%', threats: 634 },
    { name: 'Code Vulnerability Predictor', status: 'training', accuracy: '92.5%', threats: 445 }
  ];

  useEffect(() => {
    loadScanTargets();
    
    // Subscribe to real-time scan updates
    wsService.subscribe('scan_progress', (data) => {
      setScanTargets(targets => 
        targets.map(target => 
          target.id === data.scanId 
            ? { ...target, status: data.status, progress: data.progress }
            : target
        )
      );
    });

    wsService.subscribe('scan_completed', (data) => {
      setScanTargets(targets => 
        targets.map(target => 
          target.id === data.scanId 
            ? { 
                ...target, 
                status: 'completed',
                lastScan: new Date().toISOString().slice(0, 16).replace('T', ' '),
                vulnerabilities: data.vulnerabilities
              }
            : target
        )
      );
      toast.success(`Scan completed for ${data.target}`);
    });

    return () => {
      wsService.unsubscribe('scan_progress');
      wsService.unsubscribe('scan_completed');
    };
  }, []);

  const loadScanTargets = async () => {
    try {
      const targets = await firebaseService.getScanTargets();
      setScanTargets(targets);
    } catch (error) {
      console.error('Error loading scan targets:', error);
      // Fallback to demo data
      setScanTargets([
        {
          id: '1',
          name: 'api.company.com',
          type: 'web',
          url: 'https://api.company.com',
          status: 'completed',
          lastScan: '2024-01-15 14:30',
          vulnerabilities: 3
        },
        {
          id: '2',
          name: 'Mobile App v2.1',
          type: 'mobile',
          status: 'idle',
          lastScan: '2024-01-15 15:15',
          vulnerabilities: 0
        }
      ]);
    }
  };

  const addScanTarget = async () => {
    if (!newTarget.name.trim()) {
      toast.error('Please enter a target name');
      return;
    }

    setLoading(true);
    try {
      const target: Omit<ScanTarget, 'id'> = {
        name: newTarget.name,
        type: newTarget.type,
        url: newTarget.url || undefined,
        status: 'idle',
        vulnerabilities: 0
      };

      const id = await firebaseService.addScanTarget(target);
      setScanTargets(prev => [...prev, { ...target, id }]);
      
      setNewTarget({ name: '', type: 'web', url: '' });
      setShowAddTarget(false);
      toast.success('Scan target added successfully!');
    } catch (error) {
      toast.error('Failed to add scan target');
    } finally {
      setLoading(false);
    }
  };

  const startScan = async (target: ScanTarget) => {
    try {
      setScanTargets(targets => 
        targets.map(t => 
          t.id === target.id 
            ? { ...t, status: 'scanning' as const }
            : t
        )
      );

      const scanResult = await vulnerabilityAPI.scanTarget({
        id: target.id,
        name: target.name,
        type: target.type,
        url: target.url
      });

      toast.success(`Scan started for ${target.name}`);
      
      // Simulate scan progress
      let progress = 0;
      const progressInterval = setInterval(() => {
        progress += Math.random() * 20;
        if (progress >= 100) {
          clearInterval(progressInterval);
          progress = 100;
        }
        
        wsService.emit('scan_progress', {
          scanId: target.id,
          progress: Math.min(progress, 100),
          status: progress >= 100 ? 'completed' : 'scanning'
        });
      }, 1000);

    } catch (error) {
      setScanTargets(targets => 
        targets.map(t => 
          t.id === target.id 
            ? { ...t, status: 'error' as const }
            : t
        )
      );
      toast.error('Failed to start scan');
    }
  };

  const deleteScanTarget = async (targetId: string) => {
    try {
      setScanTargets(targets => targets.filter(t => t.id !== targetId));
      toast.success('Scan target deleted');
    } catch (error) {
      toast.error('Failed to delete scan target');
    }
  };

  const getTypeIcon = (type: string) => {
    const typeConfig = scanTypes.find(t => t.id === type);
    return typeConfig?.icon || Globe;
  };

  const getTypeColor = (type: string) => {
    const typeConfig = scanTypes.find(t => t.id === type);
    return typeConfig?.color || 'gray';
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'scanning': return 'text-blue-400 bg-blue-500/20 border-blue-500/30';
      case 'completed': return 'text-emerald-400 bg-emerald-500/20 border-emerald-500/30';
      case 'error': return 'text-red-400 bg-red-500/20 border-red-500/30';
      default: return 'text-gray-400 bg-gray-500/20 border-gray-500/30';
    }
  };

  const filteredTargets = scanTargets.filter(target => {
    const matchesSearch = target.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         target.type.toLowerCase().includes(searchQuery.toLowerCase());
    const matchesFilter = selectedFilter === 'all' || target.type === selectedFilter;
    return matchesSearch && matchesFilter;
  });

  return (
    <div className="space-y-6">
      {/* Enhanced Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-4xl font-bold bg-gradient-to-r from-white via-blue-400 to-purple-400 bg-clip-text text-transparent">
            AI Vulnerability Scanner
          </h1>
          <p className="text-gray-400 mt-2 text-lg">Advanced multi-platform threat detection and security assessment</p>
        </div>
        <div className="flex items-center space-x-4">
          <button
            onClick={() => setShowAddTarget(true)}
            className="bg-gradient-to-r from-emerald-500 to-blue-500 hover:from-emerald-600 hover:to-blue-600 text-white px-6 py-3 rounded-lg flex items-center space-x-2 transition-all duration-200 shadow-lg hover:shadow-emerald-500/25"
          >
            <Plus className="w-5 h-5" />
            <span>Add Target</span>
          </button>
          <button className="bg-gray-700/50 hover:bg-gray-600/50 text-white px-6 py-3 rounded-lg flex items-center space-x-2 transition-colors">
            <Settings className="w-5 h-5" />
            <span>Settings</span>
          </button>
        </div>
      </div>

      {/* Enhanced AI Analysis Status */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="bg-gradient-to-br from-gray-800/90 to-gray-900/90 border border-gray-700/50 rounded-2xl p-6 backdrop-blur-sm shadow-xl"
      >
        <div className="flex items-center justify-between mb-6">
          <h3 className="text-xl font-semibold text-white flex items-center space-x-2">
            <Brain className="w-6 h-6 text-purple-400" />
            <span>AI Analysis Engines</span>
          </h3>
          <div className="flex items-center space-x-2 bg-emerald-500/20 border border-emerald-500/30 rounded-lg px-3 py-1">
            <Zap className="w-4 h-4 text-emerald-400" />
            <span className="text-emerald-400 text-sm font-medium">All Systems Active</span>
          </div>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          {aiAnalysisTools.map((tool, index) => (
            <motion.div
              key={index}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: index * 0.1 }}
              className="bg-gradient-to-br from-gray-700/50 to-gray-800/50 rounded-xl p-4 border border-gray-600/50 hover:border-purple-500/30 transition-all duration-200"
            >
              <div className="flex items-center justify-between mb-3">
                <h4 className="text-white font-medium text-sm">{tool.name}</h4>
                <div className={`w-3 h-3 rounded-full ${tool.status === 'active' ? 'bg-emerald-400 shadow-emerald-400/50 shadow-lg' : 'bg-yellow-400 shadow-yellow-400/50 shadow-lg'} animate-pulse`}></div>
              </div>
              <div className="space-y-2">
                <div className="flex justify-between">
                  <span className="text-gray-400 text-xs">Status</span>
                  <span className={`text-xs font-medium ${tool.status === 'active' ? 'text-emerald-400' : 'text-yellow-400'}`}>
                    {tool.status === 'active' ? 'Active' : 'Training'}
                  </span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400 text-xs">Accuracy</span>
                  <span className="text-emerald-400 font-semibold text-xs">{tool.accuracy}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400 text-xs">Threats Detected</span>
                  <span className="text-blue-400 font-semibold text-xs">{tool.threats}</span>
                </div>
              </div>
            </motion.div>
          ))}
        </div>
      </motion.div>

      {/* Enhanced Filters and Search */}
      <div className="flex flex-col sm:flex-row gap-4">
        <div className="relative flex-1">
          <Search className="w-5 h-5 text-gray-400 absolute left-3 top-1/2 transform -translate-y-1/2" />
          <input
            type="text"
            placeholder="Search targets, types, or vulnerabilities..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="w-full bg-gray-700/50 border border-gray-600 rounded-lg pl-10 pr-4 py-3 text-white placeholder-gray-400 focus:outline-none focus:border-emerald-400 focus:ring-1 focus:ring-emerald-400 transition-colors"
          />
        </div>
        
        <div className="flex items-center space-x-2">
          <Filter className="w-5 h-5 text-gray-400" />
          <select
            value={selectedFilter}
            onChange={(e) => setSelectedFilter(e.target.value)}
            className="bg-gray-700/50 border border-gray-600 rounded-lg px-4 py-3 text-white focus:outline-none focus:border-emerald-400 focus:ring-1 focus:ring-emerald-400 transition-colors"
          >
            <option value="all">All Types</option>
            {scanTypes.map(type => (
              <option key={type.id} value={type.id}>{type.name}</option>
            ))}
          </select>
        </div>
      </div>

      {/* Enhanced Scan Targets */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {filteredTargets.map((target, index) => {
          const Icon = getTypeIcon(target.type);
          const isScanning = target.status === 'scanning';
          const typeColor = getTypeColor(target.type);
          
          return (
            <motion.div
              key={target.id}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: index * 0.1 }}
              className="bg-gradient-to-br from-gray-800/90 to-gray-900/90 border border-gray-700/50 rounded-2xl p-6 hover:border-emerald-500/30 transition-all duration-200 shadow-xl backdrop-blur-sm"
            >
              <div className="flex items-start justify-between mb-4">
                <div className="flex items-center space-x-3">
                  <div className={`p-3 bg-${typeColor}-500/20 rounded-xl border border-${typeColor}-500/30`}>
                    <Icon className={`w-8 h-8 text-${typeColor}-400`} />
                  </div>
                  <div>
                    <h3 className="text-white font-semibold text-lg">{target.name}</h3>
                    <p className="text-gray-400 text-sm capitalize">{target.type} security scan</p>
                    {target.url && (
                      <p className="text-gray-500 text-sm truncate max-w-xs">{target.url}</p>
                    )}
                  </div>
                </div>
                
                <div className="flex items-center space-x-2">
                  <div className={`px-3 py-1 rounded-full text-sm border ${getStatusColor(target.status)}`}>
                    {isScanning && <Clock className="w-4 h-4 inline mr-1 animate-spin" />}
                    {target.status === 'completed' && <CheckCircle className="w-4 h-4 inline mr-1" />}
                    {target.status === 'error' && <AlertTriangle className="w-4 h-4 inline mr-1" />}
                    {target.status.charAt(0).toUpperCase() + target.status.slice(1)}
                  </div>
                  <button
                    onClick={() => deleteScanTarget(target.id)}
                    className="p-2 bg-red-500/20 hover:bg-red-500/30 border border-red-500/30 rounded-lg transition-colors"
                  >
                    <Trash2 className="w-4 h-4 text-red-400" />
                  </button>
                </div>
              </div>

              {isScanning && (
                <div className="mb-4">
                  <div className="flex justify-between text-sm mb-2">
                    <span className="text-gray-400">Scanning progress</span>
                    <span className="text-white">67%</span>
                  </div>
                  <div className="w-full bg-gray-700 rounded-full h-2">
                    <motion.div
                      className="bg-gradient-to-r from-blue-500 to-emerald-500 h-2 rounded-full"
                      initial={{ width: 0 }}
                      animate={{ width: '67%' }}
                      transition={{ duration: 2 }}
                    />
                  </div>
                  <p className="text-gray-400 text-sm mt-2">Analyzing security vulnerabilities...</p>
                </div>
              )}

              <div className="grid grid-cols-2 gap-4 mb-4">
                <div className="bg-gray-700/30 rounded-lg p-3">
                  <p className="text-gray-400 text-sm">Last Scan</p>
                  <p className="text-white font-medium">{target.lastScan || 'Never'}</p>
                </div>
                <div className="bg-gray-700/30 rounded-lg p-3">
                  <p className="text-gray-400 text-sm">Vulnerabilities</p>
                  <p className={`font-bold text-lg ${target.vulnerabilities > 0 ? 'text-red-400' : 'text-emerald-400'}`}>
                    {target.vulnerabilities}
                  </p>
                </div>
              </div>

              <div className="flex space-x-3">
                <button
                  onClick={() => startScan(target)}
                  disabled={isScanning}
                  className={`flex-1 flex items-center justify-center space-x-2 px-4 py-3 rounded-lg font-medium transition-all duration-200 ${
                    isScanning 
                      ? 'bg-gray-600/50 text-gray-400 cursor-not-allowed'
                      : 'bg-gradient-to-r from-emerald-500 to-blue-500 hover:from-emerald-600 hover:to-blue-600 text-white shadow-lg hover:shadow-emerald-500/25'
                  }`}
                >
                  {isScanning ? (
                    <>
                      <Pause className="w-4 h-4" />
                      <span>Scanning...</span>
                    </>
                  ) : (
                    <>
                      <Play className="w-4 h-4" />
                      <span>Start Scan</span>
                    </>
                  )}
                </button>
                
                <button className="px-4 py-3 bg-gray-700/50 hover:bg-gray-600/50 text-white rounded-lg transition-colors flex items-center space-x-2">
                  <Download className="w-4 h-4" />
                  <span>Report</span>
                </button>
              </div>
            </motion.div>
          );
        })}
      </div>

      {/* Enhanced Add Target Modal */}
      <AnimatePresence>
        {showAddTarget && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4"
            onClick={() => setShowAddTarget(false)}
          >
            <motion.div
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              exit={{ opacity: 0, scale: 0.9 }}
              className="bg-gradient-to-br from-gray-800/95 to-gray-900/95 border border-gray-700/50 rounded-2xl p-6 max-w-4xl w-full backdrop-blur-xl shadow-2xl"
              onClick={(e) => e.stopPropagation()}
            >
              <div className="flex items-center justify-between mb-6">
                <h3 className="text-2xl font-bold text-white flex items-center space-x-2">
                  <Target className="w-6 h-6 text-emerald-400" />
                  <span>Add Security Scan Target</span>
                </h3>
                <button
                  onClick={() => setShowAddTarget(false)}
                  className="p-2 bg-gray-700/50 hover:bg-gray-600/50 rounded-lg transition-colors"
                >
                  <Square className="w-5 h-5 text-white" />
                </button>
              </div>

              <div className="grid grid-cols-2 md:grid-cols-3 gap-4 mb-6">
                {scanTypes.map((type) => {
                  const Icon = type.icon;
                  const isSelected = newTarget.type === type.id;
                  return (
                    <button
                      key={type.id}
                      onClick={() => setNewTarget(prev => ({ ...prev, type: type.id as ScanTarget['type'] }))}
                      className={`p-4 rounded-xl border transition-all duration-200 text-left ${
                        isSelected 
                          ? `bg-${type.color}-500/20 border-${type.color}-500/50 shadow-${type.color}-500/25 shadow-lg`
                          : 'bg-gray-700/30 border-gray-600/50 hover:border-gray-500/50'
                      }`}
                    >
                      <Icon className={`w-8 h-8 mb-3 ${isSelected ? `text-${type.color}-400` : 'text-gray-400'}`} />
                      <h4 className="text-white font-medium mb-1">{type.name}</h4>
                      <p className="text-gray-400 text-sm mb-2">{type.description}</p>
                      <div className="space-y-1">
                        {type.features.slice(0, 2).map((feature, idx) => (
                          <div key={idx} className="flex items-center space-x-1">
                            <CheckCircle className="w-3 h-3 text-emerald-400" />
                            <span className="text-xs text-gray-400">{feature}</span>
                          </div>
                        ))}
                      </div>
                    </button>
                  );
                })}
              </div>

              <div className="space-y-4 mb-6">
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">
                    Target Name *
                  </label>
                  <input
                    type="text"
                    value={newTarget.name}
                    onChange={(e) => setNewTarget(prev => ({ ...prev, name: e.target.value }))}
                    placeholder="e.g., api.company.com, Mobile App v2.1"
                    className="w-full bg-gray-700/50 border border-gray-600 rounded-lg px-4 py-3 text-white placeholder-gray-400 focus:outline-none focus:border-emerald-400 focus:ring-1 focus:ring-emerald-400 transition-colors"
                  />
                </div>

                {(newTarget.type === 'web' || newTarget.type === 'infrastructure') && (
                  <div>
                    <label className="block text-sm font-medium text-gray-300 mb-2">
                      URL/IP Address
                    </label>
                    <input
                      type="text"
                      value={newTarget.url}
                      onChange={(e) => setNewTarget(prev => ({ ...prev, url: e.target.value }))}
                      placeholder="https://example.com or 192.168.1.1"
                      className="w-full bg-gray-700/50 border border-gray-600 rounded-lg px-4 py-3 text-white placeholder-gray-400 focus:outline-none focus:border-emerald-400 focus:ring-1 focus:ring-emerald-400 transition-colors"
                    />
                  </div>
                )}
              </div>

              <div className="flex justify-end space-x-3">
                <button
                  onClick={() => setShowAddTarget(false)}
                  className="px-6 py-3 bg-gray-700/50 hover:bg-gray-600/50 text-white rounded-lg transition-colors"
                >
                  Cancel
                </button>
                <button
                  onClick={addScanTarget}
                  disabled={loading || !newTarget.name.trim()}
                  className="px-6 py-3 bg-gradient-to-r from-emerald-500 to-blue-500 hover:from-emerald-600 hover:to-blue-600 text-white rounded-lg transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed flex items-center space-x-2"
                >
                  {loading ? (
                    <>
                      <div className="w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
                      <span>Adding...</span>
                    </>
                  ) : (
                    <>
                      <Plus className="w-4 h-4" />
                      <span>Add Target</span>
                    </>
                  )}
                </button>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

export default VulnerabilityScanner;